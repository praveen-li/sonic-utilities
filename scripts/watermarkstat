#!/usr/bin/env python

#####################################################################
#
# watermarkstat is a tool for displaying watermarks.
#
#####################################################################

import argparse
import getopt
import json
import sys
import swsssdk
from natsort import natsorted
from tabulate import tabulate


headerPg = ['Port', 'PG0', 'PG1', 'PG2', 'PG3', 'PG4', 'PG5', 'PG6', 'PG7']
headerUc = ['Port', 'UC0', 'UC1', 'UC2', 'UC3', 'UC4', 'UC5', 'UC6', 'UC7']
headerMc = ['Port', 'MC8', 'MC9', 'MC10', 'MC11', 'MC12', 'MC13', 'MC14', 'MC15']


STATUS_NA = 'N/A'
STATUS_INVALID = 'INVALID'

QUEUE_TYPE_MC = 'MC'
QUEUE_TYPE_UC = 'UC'
QUEUE_TYPE_ALL = 'ALL'
SAI_QUEUE_TYPE_MULTICAST = "SAI_QUEUE_TYPE_MULTICAST"
SAI_QUEUE_TYPE_UNICAST = "SAI_QUEUE_TYPE_UNICAST"
SAI_QUEUE_TYPE_ALL = "SAI_QUEUE_TYPE_ALL"

COUNTER_TABLE_PREFIX = "COUNTERS:"
PERSISTENT_TABLE_PREFIX = "PERSISTENT_WATERMARKS:"
PERIODIC_TABLE_PREFIX = "PERIODIC_WATERMARKS:"
USER_TABLE_PREFIX = "USER_WATERMARKS:"

COUNTERS_PORT_NAME_MAP = "COUNTERS_PORT_NAME_MAP"
COUNTERS_QUEUE_NAME_MAP = "COUNTERS_QUEUE_NAME_MAP"
COUNTERS_QUEUE_TYPE_MAP = "COUNTERS_QUEUE_TYPE_MAP"
COUNTERS_QUEUE_INDEX_MAP = "COUNTERS_QUEUE_INDEX_MAP"
COUNTERS_QUEUE_PORT_MAP = "COUNTERS_QUEUE_PORT_MAP"
COUNTERS_PG_NAME_MAP = "COUNTERS_PG_NAME_MAP"
COUNTERS_PG_PORT_MAP = "COUNTERS_PG_PORT_MAP"
COUNTERS_PG_INDEX_MAP = "COUNTERS_PG_INDEX_MAP"


class Watermarkstat(object):

    def __init__(self):
        self.counters_db = swsssdk.SonicV2Connector(host='127.0.0.1')
        self.counters_db.connect(self.counters_db.COUNTERS_DB)
        
        # connect APP DB for clear notifications
        self.app_db = swsssdk.SonicV2Connector(host='127.0.0.1')
        self.app_db.connect(self.counters_db.APPL_DB)

        def get_queue_type(table_id):
            queue_type = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_TYPE_MAP, table_id)
            if queue_type is None:
                print "Queue Type is not available!", table_id
                sys.exit(1)
            elif queue_type == SAI_QUEUE_TYPE_MULTICAST:
                return QUEUE_TYPE_MC
            elif queue_type == SAI_QUEUE_TYPE_UNICAST:
                return QUEUE_TYPE_UC
            elif queue_type == SAI_QUEUE_TYPE_ALL:
                return QUEUE_TYPE_ALL
            else:
                print "Queue Type is invalid:", table_id, queue_type
                sys.exit(1)

        def get_queue_port(table_id):
            port_table_id = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_PORT_MAP, table_id)
            if port_table_id is None:
                print "Port is not available!", table_id
                sys.exit(1)

            return port_table_id

        def get_pg_port(table_id):
            port_table_id = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_PG_PORT_MAP, table_id)
            if port_table_id is None:
                print "Port is not available!", table_id
                sys.exit(1)

            return port_table_id

        # Get all ports
        self.counter_port_name_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_PORT_NAME_MAP)
        if self.counter_port_name_map is None:
            print "COUNTERS_PORT_NAME_MAP is empty!"
            sys.exit(1)

        self.port_uc_queues_map = {}
        self.port_mc_queues_map = {}
        self.port_pg_map = {}
        self.port_name_map = {}

        for port in self.counter_port_name_map:
            self.port_uc_queues_map[port] = {}
            self.port_mc_queues_map[port] = {}
            self.port_pg_map[port] = {}
            self.port_name_map[self.counter_port_name_map[port]] = port

        # Get Queues for each port
        counter_queue_name_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_NAME_MAP)
        if counter_queue_name_map is None:
            print "COUNTERS_QUEUE_NAME_MAP is empty!"
            sys.exit(1)

        for queue in counter_queue_name_map:
            port = self.port_name_map[get_queue_port(counter_queue_name_map[queue])]
            if get_queue_type(counter_queue_name_map[queue]) == QUEUE_TYPE_UC:
                self.port_uc_queues_map[port][queue] = counter_queue_name_map[queue]

            elif get_queue_type(counter_queue_name_map[queue]) == QUEUE_TYPE_MC:
                self.port_mc_queues_map[port][queue] = counter_queue_name_map[queue]

        # Get PGs for each port
        counter_pg_name_map = self.counters_db.get_all(self.counters_db.COUNTERS_DB, COUNTERS_PG_NAME_MAP)
        if counter_pg_name_map is None:
            print "COUNTERS_PG_NAME_MAP is empty!"
            sys.exit(1)

        for pg in counter_pg_name_map:
            port = self.port_name_map[get_pg_port(counter_pg_name_map[pg])]
            self.port_pg_map[port][pg] = counter_pg_name_map[pg]

        self.watermark_types = {
            "pg_headroom": {"message": "Ingress headroom per PG:",
                           "obj_map": self.port_pg_map,
                           "idx_func": self.get_pg_index,
                           "wm_name": "SAI_INGRESS_PRIORITY_GROUP_STAT_XOFF_ROOM_WATERMARK_BYTES",
                           "header": headerPg},
            "pg_shared": {"message": "Ingress shared pool occupancy per PG:",
                          "obj_map": self.port_pg_map,
                          "idx_func": self.get_pg_index,
                          "wm_name": "SAI_INGRESS_PRIORITY_GROUP_STAT_SHARED_WATERMARK_BYTES",
                          "header": headerPg},
            "q_shared_uni": {"message": "Egress shared pool occupancy per unicast queue:",
                            "obj_map": self.port_uc_queues_map,
                            "idx_func": self.get_queue_index,
                            "wm_name": "SAI_QUEUE_STAT_SHARED_WATERMARK_BYTES",
                            "header": headerUc},
            "q_shared_multi": {"message": "Egress shared pool occupancy per multicast queue:",
                            "obj_map": self.port_mc_queues_map,
                            "idx_func": self.get_queue_index,
                            "wm_name": "SAI_QUEUE_STAT_SHARED_WATERMARK_BYTES",
                            "header": headerMc}
        }

    def get_queue_index(self, table_id):
        queue_index = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_QUEUE_INDEX_MAP, table_id)
        if queue_index is None:
            print "Queue index is not available!", table_id
            sys.exit(1)

        return queue_index

    def get_pg_index(self, table_id):
        pg_index = self.counters_db.get(self.counters_db.COUNTERS_DB, COUNTERS_PG_INDEX_MAP, table_id)
        if pg_index is None:
            print "Priority group index is not available!", table_id
            sys.exit(1)

        return pg_index

    def get_counters(self, table_prefix, port_obj, idx_func, watermark):
        """
            Get the counters from specific table.
        """

        fields = ["0"]*8

        for name, obj_id in port_obj.items():
            full_table_id = table_prefix + obj_id
            pos = int(idx_func(obj_id)) % len(fields)
            counter_data = self.counters_db.get(self.counters_db.COUNTERS_DB, full_table_id, watermark)
            if counter_data is None:
                fields[pos] = STATUS_NA
            elif fields[pos] != STATUS_NA:
                fields[pos] = str(int(counter_data))
        cntr = tuple(fields)
        return cntr

    def get_print_all_stat(self, table_prefix, type):
        # Get stat for each port
        table = []
        for port in natsorted(self.counter_port_name_map):
            data = self.get_counters(table_prefix,
                                     type["obj_map"][port], type["idx_func"], type["wm_name"])
            table.append((port, data[0], data[1], data[2], data[3],
                        data[4], data[5], data[6], data[7]))
        print(type["message"])
        print tabulate(table, type["header"], tablefmt='simple', stralign='right')

    def send_clear_notification(self, data):
        msg = json.dumps(data, separators=(',', ':'))
        self.app_db.publish('APPL_DB', 'WATERMARK_CLEAR_REQUEST', msg)
        return


def main():

    parser = argparse.ArgumentParser(description='Display the watermark counters',
                                      version='1.0.0',
                                      formatter_class=argparse.RawTextHelpFormatter,
                                      epilog="""
Examples:
  watermarkstat -t pg_headroom
  watermarkstat -t pg_shared
  watermarkstat -t q_shared_uni -c
  watermarkstat -t q_shared_multi -c
  watermarkstat -p -t pg_shared
  watermarkstat -p -t q_shared_multi -c
""")

    parser.add_argument('-c', '--clear', action='store_true', help='Clear watermarks request')
    parser.add_argument('-p', '--persistent', action='store_true', help='Do the operations on the persistent watermark')
    parser.add_argument('-t', '--type', required=True, action='store',
                        choices=['pg_headroom', 'pg_shared', 'q_shared_uni', 'q_shared_multi'],
                        help='The type of watermark')
    args = parser.parse_args()
    watermarkstat = Watermarkstat()
   
    if args.clear:
        watermarkstat.send_clear_notification(("PERSISTENT" if args.persistent else "USER", args.type.upper()))
        sys.exit(0)
    
    table_prefix = PERSISTENT_TABLE_PREFIX if args.persistent else USER_TABLE_PREFIX 
    watermarkstat.get_print_all_stat(table_prefix, watermarkstat.watermark_types[args.type])
    sys.exit(0)


if __name__ == "__main__":
    main()
