#!/bin/bash

# Check root privileges
if [[ "$EUID" -ne 0 ]]
then
  echo "Please run as root"
  exit
fi


# Unload the previously loaded kernel if any loaded
if [[ "$(cat /sys/kernel/kexec_loaded)" -eq 1 ]]
then
  /sbin/kexec -u
fi

# Kernel and initrd image
NEXT_SONIC_IMAGE=$(sonic_installer list | grep "Next: " | cut -d ' ' -f 2)
if grep -q aboot_platform= /host/machine.conf; then
    IMAGE_PATH="/host/image-${NEXT_SONIC_IMAGE#SONiC-OS-}"
    KERNEL_IMAGE="$(ls $IMAGE_PATH/boot/vmlinuz-*)"
    BOOT_OPTIONS="$(cat "$IMAGE_PATH/kernel-cmdline" | tr '\n' ' ') fast-reboot"
elif grep -q onie_platform= /host/machine.conf; then
    KERNEL_OPTIONS=$(cat /host/grub/grub.cfg | sed "/$NEXT_SONIC_IMAGE'/,/}/"'!'"g" | grep linux)
    KERNEL_IMAGE="/host$(echo $KERNEL_OPTIONS | cut -d ' ' -f 2)"
    BOOT_OPTIONS="$(echo $KERNEL_OPTIONS | sed -e 's/\s*linux\s*/BOOT_IMAGE=/') fast-reboot"
else
    echo "Unknown bootloader. fast-reboot is not supported."
    exit 1
fi
INITRD=$(echo $KERNEL_IMAGE | sed 's/vmlinuz/initrd.img/g')

sonic_asic_type=$(sonic-cfggen -y /etc/sonic/sonic_version.yml -v asic_type)

# Load kernel into the memory
/sbin/kexec -l "$KERNEL_IMAGE" --initrd="$INITRD" --append="$BOOT_OPTIONS"

# Dump the ARP and FDB tables to files also as default routes for both IPv4 and IPv6
# into /host/fast-reboot
mkdir -p /host/fast-reboot
/usr/bin/fast-reboot-dump.py -t /host/fast-reboot

# Kill bgpd to start the bgp graceful restart procedure
docker exec -i bgp killall -9 zebra
docker exec -i bgp killall -9 bgpd

# Kill lldp, otherwise it sends informotion about reboot
docker kill lldp > /dev/null

# Kill teamd, otherwise it gets down all LAGs
docker kill teamd > /dev/null

# syncd graceful stop is supported only for Broadcoms platforms only for now
if [[ "$sonic_asic_type" = 'broadcom' ]];
then
    # Gracefully stop syncd
    docker exec -i syncd /usr/bin/syncd_request_shutdown --cold > /dev/null

    # Check that syncd was stopped
    while docker top syncd | grep -q /usr/bin/syncd
    do
          sleep 0.1
    done
fi

# Kill other containers to make the reboot faster
docker ps -q | xargs docker kill > /dev/null

# Stop the docker container engine. Otherwise we will have a broken docker storage
systemctl stop docker.service

# Stop opennsl modules for Broadcom platform
if [[ "$sonic_asic_type" = 'broadcom' ]];
then
  service_name=$(systemctl list-units --plain --no-pager --no-legend --type=service | grep opennsl | cut -f 1 -d' ')
  systemctl stop "$service_name"
fi

# Stop kernel modules for Nephos platform
if [[ "$sonic_asic_type" = 'nephos' ]];
then
  systemctl stop nps-modules-`uname -r`.service
fi

# Wait until all buffers synced with disk
sync
sleep 1
sync

# Reboot: explicity call Linux native reboot under sbin
echo "Rebooting to $NEXT_SONIC_IMAGE..."
/sbin/reboot
